<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cvDestinationIsRequiredIfOriginUnspecified.ErrorMessage" xml:space="preserve">
    <value>Destination tax zone is required if origin has not been specified</value>
  </data>
  <data name="cvOriginIsRequiredIfDestinationUnspecified.ErrorMessage" xml:space="preserve">
    <value>Origin tax zone is required if destination has not been specified</value>
  </data>
  <data name="cvRateIsDecimal.ErrorMessage" xml:space="preserve">
    <value>Tax rate must be a decimal</value>
  </data>
  <data name="cvReateGreaterThanZero.ErrorMessage" xml:space="preserve">
    <value>Tax rate must be greater than or equal to zero</value>
  </data>
  <data name="cvTaxRateIsUnique.ErrorMessage" xml:space="preserve">
    <value>Tax rate already defined for this tax category</value>
  </data>
  <data name="lblDestinationTaxZone.Text" xml:space="preserve">
    <value>Destination tax zone :</value>
  </data>
  <data name="lblOriginTaxZone.Text" xml:space="preserve">
    <value>Origin tax zone :</value>
  </data>
  <data name="lblRate.Text" xml:space="preserve">
    <value>Rate :</value>
  </data>
  <data name="lblTaxCategory.Text" xml:space="preserve">
    <value>Tax category :</value>
  </data>
  <data name="lblTaxType.Text" xml:space="preserve">
    <value>Tax type :</value>
  </data>
  <data name="lbtnRefresh.Text" xml:space="preserve">
    <value>Refresh</value>
  </data>
  <data name="litDestinationTaxZone.Text" xml:space="preserve">
    <value>Destination tax zone</value>
  </data>
  <data name="litOriginTaxZone.Text" xml:space="preserve">
    <value>Origin tax zone</value>
  </data>
  <data name="litRate.Text" xml:space="preserve">
    <value>Rate (%)</value>
  </data>
  <data name="litTaxCategory.Text" xml:space="preserve">
    <value>Tax category</value>
  </data>
  <data name="litTaxRates.Text" xml:space="preserve">
    <value>Tax rates</value>
  </data>
  <data name="mgvcDestinationTaxZone.Name" xml:space="preserve">
    <value>Destination tax zone</value>
  </data>
  <data name="mgvcOriginTaxZone.Name" xml:space="preserve">
    <value>Origin tax zone</value>
  </data>
  <data name="mgvcRate.Name" xml:space="preserve">
    <value>Rate (%)</value>
  </data>
  <data name="mgvcTaxCategory.Name" xml:space="preserve">
    <value>Tax Category</value>
  </data>
  <data name="rfvRate.ErrorMessage" xml:space="preserve">
    <value>Please enter a rate</value>
  </data>
  <data name="rfvTaxCategory.ErrorMessage" xml:space="preserve">
    <value>Please select a Tax category</value>
  </data>
  <data name="TaxRateAlreadyDefined" xml:space="preserve">
    <value>A tax rate already defined for this tax category</value>
  </data>
  <data name="lblDestinationTaxZone.ToolTip" xml:space="preserve">
    <value>The destination  tax zone corresponds to the zone of the delivery  address.</value>
  </data>
  <data name="lblOriginTaxZone.ToolTip" xml:space="preserve">
    <value>The origin tax zone corresponds to the tax zone where from the goods will be shipped.</value>
  </data>
  <data name="lblRate.ToolTip" xml:space="preserve">
    <value>Tax Rate.</value>
  </data>
  <data name="lblTaxCategory.ToolTip" xml:space="preserve">
    <value>A category in which a tax rate is defined.</value>
  </data>
  <data name="mgvcDestinationTaxZone.ToolTip" xml:space="preserve">
    <value>The destination  tax zone corresponds to the zone of the delivery  address.</value>
  </data>
  <data name="mgvcOriginTaxZone.ToolTip" xml:space="preserve">
    <value>The origin tax zone corresponds to the tax zone where from the goods will be shipped.</value>
  </data>
  <data name="mgvcRate.ToolTip" xml:space="preserve">
    <value>Tax Rate.</value>
  </data>
  <data name="mgvcTaxCategory.ToolTip" xml:space="preserve">
    <value>The tax rate will apply to products associated with teh selected tax category.</value>
  </data>
  <data name="lblSegment.Text" xml:space="preserve">
    <value>Segment :</value>
  </data>
  <data name="litSegment.Text" xml:space="preserve">
    <value>Segment</value>
  </data>
  <data name="mgvcSegment.Name" xml:space="preserve">
    <value>Segment</value>
  </data>
</root>